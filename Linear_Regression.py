# -*- coding: utf-8 -*-
"""Linear_Reg_P1Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mjdZxs6JAt6oTY34aK8uAfY7Quru4FJ5
"""

import numpy as np
import sympy as sp
import matplotlib.pyplot as plt

x = np.array([1, 2])
y = np.array([1,3])
theta1 = 0
theta2 = 0
theta = np.array([theta1,theta2])
#theta1 = theta[0]
#theta2 = theta[1]
#thetaT = theta.transpose()
#print(thetaT)
theta1,theta2 = sp.symbols('theta1 theta2')
Jtheta1 = sp.diff(((1/2)*((x[0])*(theta1) + theta2 - y[0]))**2 + ((1/2)*((x[1])*(theta1) + theta2 - y[1]))**2 , theta1) # derivative w.r.t theta1

#print(Jtheta1)
Jtheta2 = sp.diff(((1/2)*((x[0])*(theta1) + theta2 - y[0]))**2 + ((1/2)*((x[1])*(theta1) + theta2 - y[1]))**2 , theta2) #derivative w.r.t theta2
#print(Jtheta2)

## Read documents on polyfit and tried to design it from scratch

itt_count = 5 #no. of itterations
alpha = 0.1 #given step value
for i in range(itt_count):
  plt.plot(x,y,'o')
  Jtheta1_val = (Jtheta1.subs({theta1:theta[0] ,theta2:theta[1]}))
  Jtheta2_val = (Jtheta2.subs({theta1:theta[0] ,theta2:theta[1]}))
  Jtheta = np.array([Jtheta1_val, Jtheta2_val])
  #print(Jtheta)
  theta = theta - alpha*Jtheta #update value of theta and Jtheta 
  print(theta) # result of hand solved question
  m = theta[0] #finding slope which is done by polyfit
  c = theta[1] #finding y-intercept which is done by polyfit
  y = m*x + c
  plt.ylim(top=4)  
  plt.ylim(bottom=0)
  plt.xlim(right=3)  
  plt.xlim(left=0)
  plt.plot(x, y)
  plt.show()